# -*- coding: utf-8 -*-
"""Ikawa_Profile_Analysis_Tool

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VAxAvlop0rAM0zP-S6ix7y3leWJh-lav
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile Ikawa_Profile_Analysis_Tool.py
# # Ikawa_Profile_Analysis_Tool.py
# # -*- coding: utf-8 -*-
# 
# import streamlit as st
# import pandas as pd
# import numpy as np
# import plotly.graph_objects as go
# import plotly.express as px
# from streamlit_plotly_events import plotly_events
# import io
# 
# # ==============================================================================
# # 핵심 함수
# # ==============================================================================
# 
# @st.cache_data
# def process_uploaded_file(file_content, input_method):
#     """업로드된 파일 전체를 읽고 처리하는 과정을 캐시합니다."""
#     graph_data = {}
#     try:
#         raw_df = pd.read_excel(io.BytesIO(file_content), header=None)
# 
#         # --- 파싱 로직 ---
#         parsed_profiles = {}
#         profile_names_row = raw_df.iloc[0]
#         cols_per_profile = 3 if input_method == '시간 입력' else 2
#         for col_idx, name in profile_names_row.dropna().items():
#             try:
#                 profile_chunk = raw_df.iloc[2:, col_idx:col_idx + cols_per_profile]
#                 profile_chunk.columns = raw_df.iloc[1, col_idx:col_idx + cols_per_profile].values
#                 profile_chunk.dropna(how='all', inplace=True)
#                 parsed_profiles[name] = profile_chunk
#             except Exception:
#                 continue
# 
#         if not parsed_profiles:
#             st.error("파일에서 유효한 프로파일을 찾을 수 없습니다.")
#             return {}
# 
#         # --- 계산 로직 ---
#         for name, df in parsed_profiles.items():
#             calculated = process_profile_data(df, input_method)
#             if calculated is not None:
#                 graph_data[name] = {'calculated': calculated, 'interpolated': None}
#             else:
#                 st.warning(f"'{name}' 프로파일에 유효한 데이터가 없어 그래프를 생성할 수 없습니다.")
# 
#         return graph_data
# 
#     except Exception as e:
#         st.error(f"파일 처리 중 오류가 발생했습니다: {e}")
#         return {}
# 
# def process_profile_data(df: pd.DataFrame, input_method: str) -> pd.DataFrame | None:
#     """단일 프로파일 DF를 받아 모든 시간/ROR 계산을 수행합니다."""
#     processed_df = df.copy()
#     cols_to_numeric = ['온도℃', '분', '초', '구간(초)']
#     for col in cols_to_numeric:
#         if col in processed_df.columns:
#             processed_df[col] = pd.to_numeric(processed_df[col], errors='coerce')
#     processed_df.dropna(subset=['온도℃'], inplace=True)
#     if processed_df.empty: return None
#     processed_df.reset_index(drop=True, inplace=True)
#     processed_df.insert(0, '번호', processed_df.index)
#     if input_method == '시간 입력':
#         processed_df['분'].fillna(0, inplace=True)
#         processed_df['초'].fillna(0, inplace=True)
#         total_seconds = processed_df['분'] * 60 + processed_df['초']
#         processed_df['구간(초)'] = total_seconds.diff()
#     else: # 구간 입력
#         processed_df['구간(초)'].fillna(0, inplace=True)
#         total_seconds = processed_df['구간(초)'].cumsum()
#         processed_df['분'] = (total_seconds // 60).astype('Int64')
#         processed_df['초'] = (total_seconds % 60).astype('Int64')
#     processed_df['누적(초)'] = processed_df['구간(초)'].cumsum().fillna(0)
#     temp_diff = processed_df['온도℃'].diff()
#     time_diff = processed_df['구간(초)']
#     where_condition = time_diff.fillna(0) != 0
#     ror_per_sec = np.divide(temp_diff, time_diff, out=np.zeros_like(temp_diff, dtype=float), where=where_condition)
#     processed_df['ROR(초당)'] = pd.Series(ror_per_sec).fillna(0)
#     return processed_df
# 
# def interpolate_data(df_calc: pd.DataFrame) -> pd.DataFrame | None:
#     # 보간 제거로 인해 원본 데이터를 그대로 반환
#     return df_calc
# 
# def display_hover_info(hovered_time, selected_profiles, graph_data, colors):
#     """그래프 호버 시 분석 패널에 정보를 표시합니다."""
#     st.markdown("#### 분석 정보")
#     if hovered_time is None or not graph_data:
#         st.info("그래프 위에 마우스를 올리면 상세 정보가 표시됩니다.")
#         return
#     hover_sec = int(hovered_time)
# 
#     try:
#         first_profile_name = next(name for name in selected_profiles if name in graph_data and graph_data[name]['calculated'] is not None)
#         df_calc_first = graph_data[first_profile_name]['calculated']
# 
#         # 호버 위치의 온도 계산 (실제 데이터 포인트 간의 선형 보간으로 온도 추정)
#         temp_at_hover = np.interp(hover_sec, df_calc_first['누적(초)'], df_calc_first['온도℃'])
#         st.markdown(f"**{hover_sec // 60}분 {hover_sec % 60:02d}초 ({hover_sec}초) / {temp_at_hover:.1f}℃**")
#     except (StopIteration, KeyError, IndexError):
#          return
#     st.divider()
#     for i, name in enumerate(selected_profiles):
#         if name in graph_data:
#             data = graph_data.get(name, {})
#             df_calc = data.get('calculated')
#             color = colors[i % len(colors)]
# 
#             current_segment = df_calc[df_calc['누적(초)'] <= hover_sec].iloc[-1:]
#             if current_segment.empty: continue
# 
#             idx = current_segment.index[0]
#             current_time = current_segment['누적(초)'].iloc[0]
#             current_ror = current_segment['ROR(초당)'].iloc[0]
#             current_temp = current_segment['온도℃'].iloc[0]
# 
#             is_on_point = abs(current_time - hover_sec) <= 0.5
# 
#             if is_on_point:
#                 display_temp = current_temp
#                 point_num = current_segment['번호'].iloc[0]
#                 st.markdown(f"<span style='color:{color};'>●</span> **{name}**: 포인트 {int(point_num)}: {display_temp:.1f}℃ (초당 {current_ror:.3f}℃ 상승)", unsafe_allow_html=True)
#             else:
#                 time_in_segment = hover_sec - current_time
#                 interp_temp = current_temp + current_ror * time_in_segment
# 
#                 st.markdown(f"<span style='color:{color};'>●</span> **{name}**: 포인트 {int(current_segment['번호'].iloc[0])}-{int(current_segment['번호'].iloc[0]) + 1} 구간: {interp_temp:.1f}℃ (초당 {current_ror:.3f}℃ 상승)", unsafe_allow_html=True)
# 
# @st.cache_data
# def create_template_excel(format_type):
#     output = io.BytesIO()
#     with pd.ExcelWriter(output, engine='openpyxl') as writer:
#         if format_type == '시간 입력':
#             df1 = pd.DataFrame({'온도℃': [120, 140, 160], '분': [0, 0, 1], '초': [0, 40, 23]})
#             df2 = pd.DataFrame({'온도℃': [115, 150, 170], '분': [0, 1, 1], '초': [0, 5, 40]})
#             df_a = pd.concat([pd.DataFrame([['프로파일 A', '', '']], columns=['A', 'B', 'C']), pd.DataFrame([['온도℃', '분', '초']], columns=['A', 'B', 'C']), df1.rename(columns={'온도℃': 'A', '분': 'B', '초': 'C'})], ignore_index=True)
#             df_b = pd.concat([pd.DataFrame([['프로파일 B', '', '']], columns=['D', 'E', 'F']), pd.DataFrame([['온도℃', '분', '초']], columns=['D', 'E', 'F']), df2.rename(columns={'온도℃': 'D', '분': 'E', '초': 'F'})], ignore_index=True)
#             df_final = pd.concat([df_a, df_b], axis=1)
#         else: # 구간 입력
#             df1 = pd.DataFrame({'온도℃': [120, 140, 160], '구간(초)': [np.nan, 40, 43]})
#             df2 = pd.DataFrame({'온도℃': [115, 150, 170], '구간(초)': [np.nan, 65, 35]})
#             df_a = pd.concat([pd.DataFrame([['프로파일 A', '']], columns=['A', 'B']), pd.DataFrame([['온도℃', '구간(초)']], columns=['A', 'B']), df1.rename(columns={'온도℃': 'A', '구간(초)': 'B'})], ignore_index=True)
#             df_b = pd.concat([pd.DataFrame([['프로파일 B', '']], columns=['C', 'D']), pd.DataFrame([['온도℃', '구간(초)']], columns=['C', 'D']), df2.rename(columns={'온도℃': 'C', '구간(초)': 'D'})], ignore_index=True)
#             df_final = pd.concat([df_a, df_b], axis=1)
#         df_final.to_excel(writer, sheet_name='profiles', index=False, header=False)
#     return output.getvalue()
# 
# # ==============================================================================
# # UI 렌더링
# # ==============================================================================
# st.set_page_config(layout="wide", page_title="이카와 로스팅 프로파일 계산 툴 v7.0")
# st.title("☕ 이카와 로스팅 프로파일 계산 툴 v7.0 (Final Stable Version)")
# 
# if 'graph_data' not in st.session_state:
#     st.session_state.graph_data = {}
# 
# st.markdown("### 1. 분석할 파일의 형식을 선택하세요.")
# input_method = st.radio("파일 형식 선택", ["시간 입력", "구간 입력"], horizontal=True, label_visibility="collapsed")
# 
# col1, col2 = st.columns(2)
# with col1:
#     st.download_button(label="📥 엑셀 템플릿 다운로드", data=create_template_excel(input_method), file_name=f"template.xlsx")
# with col2:
#     uploaded_file = st.file_uploader("**2. 프로파일 엑셀 파일을 업로드하세요.**", type=['xlsx'], label_visibility="collapsed")
# 
# st.markdown("---")
# 
# graph_data = {}
# if uploaded_file is not None:
#     with st.spinner("파일 처리 중..."):
#         file_bytes = uploaded_file.getvalue()
#         graph_data = process_uploaded_file(file_bytes, input_method)
#         st.session_state.graph_data = graph_data
# 
# with st.sidebar:
#     st.header("보기 옵션")
#     if graph_data:
#         selected_profiles = [name for name in graph_data.keys() if st.checkbox(name, value=True, key=f"select_{name}")]
#         st.divider()
#         show_ror_graph = st.checkbox("ROR 그래프 표시", value=True)
#     else:
#         selected_profiles = []
#         show_ror_graph = True
#     st.divider()
#     with st.expander("🛠️ 개발자 모드"):
#         st.write("`graph_data` 내용:")
#         st.json({k: {
#             'calculated': v['calculated'].to_string() if v.get('calculated') is not None else "None",
#             'interpolated': '제거됨 (성능)'
#         } for k, v in graph_data.items()} if graph_data else {})
# 
# st.header("📊 프로파일 비교 그래프 및 분석")
# col_graph, col_info = st.columns([3, 1])
# 
# with col_graph:
#     fig = go.Figure()
#     colors = px.colors.qualitative.Plotly
#     if not graph_data:
#         st.info("엑셀 파일을 업로드하여 분석을 시작하세요.")
#     else:
#         for i, name in enumerate(selected_profiles):
#             if name in graph_data and name in selected_profiles:
#                 data = graph_data.get(name, {})
#                 df_calc = data.get('calculated')
#                 color = colors[i % len(colors)]
#                 if df_calc is not None:
#                     fig.add_trace(go.Scatter(x=df_calc['누적(초)'], y=df_calc['온도℃'], name=f'{name} - 온도', mode='lines+markers', line=dict(color=color), marker=dict(size=8), showlegend=True, hoverinfo='none'))
#                     if show_ror_graph:
#                         fig.add_trace(go.Scatter(x=df_calc['누적(초)'], y=df_calc['ROR(초당)'], name=f'{name} - ROR', mode='lines+markers', line=dict(color=color, dash='dot'), yaxis='y2', marker=dict(size=8), showlegend=True, hoverinfo='none'))
# 
#     fig.update_layout(height=600, xaxis=dict(title='시간 합계 (초)', range=[0, 360]), yaxis=dict(title='온도 (°C)', range=[85, 235]), yaxis2=dict(title='ROR(초당)', overlaying='y', side='right', range=[0, 0.75]), legend=dict(x=0, y=1.1, orientation='h'), hovermode='x unified')
#     selected_points = plotly_events(fig, hover_event=True, key="graph_hover_events")
# 
# with col_info:
#     last_hovered_time = selected_points[0]['x'] if selected_points else None
#     display_hover_info(last_hovered_time, selected_profiles, graph_data, px.colors.qualitative.Plotly)